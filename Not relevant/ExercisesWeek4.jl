using LinearAlgebra
## # # # # # # # # # # # # # # # # # # #
# #  Soda
# # # # # # # # # # # # # #
P = [0.75  0.2  0.05    ;
    0.3  0.6    0.1   ;
    0.15  0.05  0.8]

A = [P'-I; ones(3)']
b = [zeros(3); 1]
pi = A\b
## Alternative Calculation:
P100 = P^100


## # # # # # # # # # # # # # # # # # # #
# #  Penicilline
# # # # # # # # # # # # # #
#Because of re-ordering also at 1 stock left, change in transition matrix


P = [
00.7  0.05 0.05 0.05 0.05 0.1 0 0 0 0 0 0 0 0 0 0 ;
0.5  0.2 0.05 0.05 0.05 0.05 0.1 0 0 0 0 0 0 0 0 0 ;
0.3  0.2 0.2 0.05 0.05 0.05 0.05 0.1 0 0 0 0 0 0 0 0 ;
0.2  0.1 0.2 0.2 0.05 0.05 0.05 0.05 0.1 0 0 0 0 0 0 0 ;
0  0.2 0.1 0.2 0.2 0.05 0.05 0.05 0.05 0.1 0 0 0 0 0 0 ;
0  0  0.2 0.1 0.2 0.2 0.05 0.05 0.05 0.05 0.1 0 0 0 0 0 ;
0  0  0  0.2 0.1 0.2 0.2 0.05 0.05 0.05 0.05 0.1 0 0 0 0 ;
0  0  0  0 0.2 0.1 0.2 0.2 0.05 0.05 0.05 0.05 0.1 0 0 0 ;
0  0  0  0 0 0.2 0.1 0.2 0.2 0.05 0.05 0.05 0.05 0.1 0 0 ;
0  0  0  0 0 0 0.2 0.1 0.2 0.2 0.05 0.05 0.05 0.05 0.1 0 ;
0  0  0  0 0 0 0 0.2 0.1 0.2 0.2 0.05 0.05 0.05 0.05 0.1 ;
0  0  0  0 0 0 0 0 0.2 0.1 0.2 0.2 0.05 0.05 0.05 0.15 ;
0  0  0  0 0 0 0 0 0 0.2 0.1 0.2 0.2 0.05 0.05 0.2 ;
0  0  0  0 0 0 0 0 0 0 0.2 0.1 0.2 0.2 0.05 0.25 ;
0  0  0  0 0 0 0 0 0 0 0 0.2 0.1 0.2 0.2 0.3 ;
0  0  0  0 0 0 0 0 0 0 0 0 0.2 0.1 0.2 0.5 ]

A = [P'-I; ones(16)']
 b = [zeros(16); 1]
 pi = A\b
## Alternative Calculation:
 P100 = P^100

## Task: calculate probability of at least one disgarded bottle in the steady state:
d = [0,     1,    2,    3,    4,   5,   6,    7,   8]
pd =[0.1, 0.05, 0.05, 0.05, 0.05, 0.2, 0.2 , 0.1, 0.2]

probDiscardBottle = 0.0542258 * 0.1 +  0.064221 * (0.1 + 0.05) +  0.0461601 * (0.1 + 0.05 + 0.05) + 0.0470104 * (0.1 + 0.05 + 0.05 + 0.05) +  0.104258 * (0.1 + 0.05 + 0.05 +0.05 + 0.05)


probEmergencyDelivery = 0.149366 * (0.2+0.1+0.2) +  0.0411135 * (0.2+0.1) +  0.0474652 * (0.2)

## # # # # # # # # # # # # # # # # # # #
# #  Inventory revisited
# # # # # # # # # # # # # #

P = [
              0.5   0.5   0  0  0  0    ;
             (1/3)  (1/3)   (1/3) 0  0  0    ;
             0  (1/6) (1/6) (2/3) 0  0    ;
             0   0  (1/6) (1/6) (2/3) 0     ;
             0  0  0  (1/6) (1/2) (1/3)    ;
            0  0  0  0  (1/3) (2/3)
            ]

#Suggestion: transpose P, replace diagonal entries with "entry-1" to construct A. Finally add 1's at the bottom row
A = [
 -0.5  0.333333  0.0       0.0       0.0       0.0;
 0.5  -(2/3)  0.166667  0.0       0.0       0.0;
 0.0  0.333333  (0.166667-1)  0.166667  0.0       0.0;
 0.0  0.0       0.666667  (0.166667-1)  0.166667  0.0;
 0.0  0.0       0.0       0.666667  -0.5       0.333333;
 0.0  0.0       0.0       0.0       0.333333  -(1/3);
 1     1         1         1          1         1 ]

 b = [0 0 0 0 0 0 1]


pi = A\b'
#Suggestion: You can easily check your answer for pi with P^n for large n

# Expected costs
C = [0, 500, 1000, 2250, 3000, 3250]
C'*pi'


## # # # # # # # # # # # # # # # # # # #
# #  Inventory revisited
# # # # # # # # # # # # # #
#Because of re-ordering also at 1 stock left, change in transition matrix
P =[ 0.25  0.25   0.25   0.25;
     0.25  0.25   0.25      0.25   ;
     0.5   0.25   0.25   0    ;
     0.25  0.25   0.25   0.25]
    P2 = P*P;  #all nonzero entries: steady state exists



#Calculation of the steady state probabilities
A =[
-0.75   0.25   0.5     0.25 ;
 0.25  -0.75   0.25    0.25 ;
 0.25   0.25  -0.75    0.25 ;
 0.25   0.25     0    -0.75 ;
 1   1   1   1 ]
b = [0 0 0 0  1]

pi = A\b'
A*pi



#Calculation of the expected cost per state
k0 = 1000 + 0.25 * (3-0) * 10 +  0.25 * (3-1) * 10 + 0.25 * (3-2) * 10 + 0.25 * (3-3) * 10
k1 =  700 + 0.25 * (3-0) * 10 +  0.25 * (3-1) * 10 + 0.25 * (3-2) * 10 + 0.25 * (3-3) * 10
k2 =  0.25 * (2-0) * 10 +  0.25 * (2-1) * 10 + 0.25 * (2-2) * 10 +  0.25 * (3-2) * 600
k3 =  0.25 * (3-0) * 10 +  0.25 * (3-1) * 10 + 0.25 * (3-2) * 10 + 0.25 * (3-3) * 10
 c = [k0, k1, k2, k3]

 #Total expected costs:
 expectedCosts =  c'*pi # 538.1249999999999, an improvement of 6%  over 572.9687500000001 from the slides
